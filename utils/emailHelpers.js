const { ImapFlow } = require('imapflow')
const fs = require('fs')
const path = require('path')
const pino = require('pino')()
const xlsx = require('xlsx')
const iconv = require('iconv-lite')
// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–∏—Å–µ–º –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ email –∏–ª–∏ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
const moment = require('moment')

require('dotenv').config()
pino.level = 'silent'

exports.connectToImap = async () => {
    // console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É...')
    const client = new ImapFlow({
        host: 'pkz41.hoster.kz',
        port: 993,
        secure: true,
        tls: { rejectUnauthorized: false },
        auth: { user: process.env.HOST_EMAIL, pass: process.env.HOST_PASS },
        logger: pino,
    })

    await client.connect()
    // console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')
    return client
}

// Function to sanitize folder names (removes bad characters)
const cleanFolderName = (name) => {
    if (!name || typeof name !== 'string') return 'city_undefined'

    return name
        .replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s_-]/g, '')  // Remove special characters (like `"` and `\n`)
        .trim()  // Remove leading/trailing spaces
}

// Function to determine both city and supplier from the file buffer
exports.determineCityAndSupplier = (buffer, filename, sender) => {
    const fileType = filename.endsWith('.xls') ? 'xls' : 'xlsx'
    let cityResult = { success: false }
    let supplierResult = { success: false }

    console.log(filename)

    // Sort city names by descending length
    const sortedCityKeys = Object.keys(sender.cities).sort((a, b) => b.length - a.length)
    // console.log(sortedCityKeys)
    // Check for city
    for (let cell of sender.cellCoordinates) {
        cityResult = checkCellForCity(buffer, fileType, cell, sender.cities, sortedCityKeys)
        if (cityResult.success) break // Stop if we find a valid city
    }

    // Check for supplier (Testmed first, then Daichin)
    if (sender.testmedCoordinates) {
        const { names, coordinates } = sender.testmedCoordinates
        for (let cell of coordinates) {
            supplierResult = checkCellForSupplier(buffer, fileType, cell, names)
            if (supplierResult.success) {
                supplierResult.supplier = '–¢–µ—Å—Ç-–ú–µ–¥–∏–∫–∞–ª' // Set the supplier name
                break
            }
        }
    }

    if (!supplierResult.success && sender.daichinCoordinates) {
        const { names, coordinates } = sender.daichinCoordinates
        for (let cell of coordinates) {
            supplierResult = checkCellForSupplier(buffer, fileType, cell, names)
            if (supplierResult.success) {
                supplierResult.supplier = '–î–∞–π—á–∏–Ω' // Set the supplier name
                break
            }
        }
    }

    // Clean the folder names before using them
    const city = cityResult.success ? cleanFolderName(cityResult.city) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'
    const supplier = supplierResult.success ? cleanFolderName(supplierResult.supplier) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'

    return { city, supplier }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—ë, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
exports.ensureEmailFolderExists = async (client, folderName) => {
    // console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏: ${folderName}`)
    const mailboxes = await client.list()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
    const folderExists = mailboxes.some(mailbox => mailbox.path === folderName)
    if (!folderExists) {
        // (`–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏: ${folderName}`)
        await client.mailboxCreate(folderName)
    }
}

// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∏–∑ INBOX –≤ –ø–∞–ø–∫—É –∫–æ–º–ø–∞–Ω–∏–∏
exports.moveEmailsToFolder = async (client, messageUids, folderName) => {
    // console.log(`–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ${messageUids.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–ø–∫—É ${folderName}`)
    await client.messageMove(messageUids, folderName)
}

exports.searchEmails = async (client, emailQuery, targetDate) => {
    // console.log(`–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ${emailQuery}`)

    // üî• Fix 1: Convert `targetDate` to IMAP required format "DD-MMM-YYYY"
    const adjustedDate = moment(targetDate).format('YYYY-MM-DD') // Example: "18-Feb-2025"

    let searchCriteria = []
    let from

    if (emailQuery.startsWith('@')) {
        // üî• Fix 2: Ensure emailQuery has "@" and is lowercase
        const domain = emailQuery.substring(1).toLowerCase().trim()
        from = `@${domain}`
    } else {
        from = emailQuery.toLowerCase().trim()
    }

    // console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏: ${JSON.stringify(searchCriteria)}`)

    try {
        const messages = await client.search({ from, on: adjustedDate })
        // console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${Array.isArray(messages) ? messages.length : 0}`)

        return Array.isArray(messages) ? messages : []
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error)
        return []
    }
}

const checkCellForCity = (fileContent, fileType, cell, cities, sortedCityKeys) => {
    try {
        let worksheet
        if (fileType === 'xls') {
            const decodedData = iconv.decode(fileContent, 'windows-1251')
            const workbook = xlsx.read(decodedData, { type: 'string' })
            worksheet = workbook.Sheets[workbook.SheetNames[0]]
        } else {
            const workbook = xlsx.read(fileContent, { type: 'buffer' })
            worksheet = workbook.Sheets[workbook.SheetNames[0]]
        }

        const cellValue = worksheet[cell] ? worksheet[cell].v : null
        if (!cellValue) return { success: false, message: '–Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞' }

        if (!sortedCityKeys.length) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.")
            return { success: false, message: '–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç' }
        }

        // Convert cellValue to lowercase for case-insensitive comparison
        const cellValueLower = cellValue.toLowerCase()

        // Find all matching cities (case-insensitive)
        const foundCities = sortedCityKeys
            .filter(subCity => cellValueLower.includes(subCity.toLowerCase()))
            .map(subCity => ({ name: subCity, length: subCity.length }))

        if (!foundCities.length) {
            return { success: false, message: '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
        }

        // Find the maximum length among found cities
        const maxLength = Math.max(...foundCities.map(city => city.length))

        // Get all cities with the maximum length
        const longestCities = foundCities.filter(city => city.length === maxLength)

        // Pick the last city among the longest ones
        const selectedCity = longestCities[longestCities.length - 1].name
        const foundMainCity = cities[selectedCity]

        return { success: true, city: foundMainCity }
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —è—á–µ–π–∫–∏ ${cell}:`, err)
        return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —è—á–µ–π–∫–∏' }
    }
}

const checkCellForSupplier = (fileContent, fileType, cell, names) => {
    try {
        let worksheet
        if (fileType === 'xls') {
            const decodedData = iconv.decode(fileContent, 'windows-1251')
            const workbook = xlsx.read(decodedData, { type: 'string' })
            worksheet = workbook.Sheets[workbook.SheetNames[0]]
        } else {
            const workbook = xlsx.read(fileContent, { type: 'buffer' })
            worksheet = workbook.Sheets[workbook.SheetNames[0]]
        }

        const cellValue = worksheet[cell] ? worksheet[cell].v : null
        if (!cellValue) return { success: false, message: '–Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞' }

        // Check if the cell value matches any of the supplier names
        const foundSupplier = names.find(name => cellValue.includes(name))
        return foundSupplier ? { success: true, supplier: foundSupplier } : { success: false, message: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —è—á–µ–π–∫–∏ ${cell}:`, err)
        return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —è—á–µ–π–∫–∏' }
    }
}